#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
x<-seq(0,1,length.out = 10)
y<-rnorm(10, mean=0,sd=0.3)
t<-sin(2*pi*x)+y
plot(x,t,ylab = "prediction of mean", ylim = c(-2.5,2.5), col=4,lwd=2, main="GP regression")
#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
x<-seq(0,1,length.out = 10)
y<-rnorm(10, mean=0,sd=0.3)
t<-sin(2*pi*x)+y
plot(x,t,ylab = "prediction of mean", ylim = c(-2.5,2.5), col=4,lwd=2, main="GP regression")
#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
x<-seq(0,1,length.out = 10)
y<-rnorm(10, mean=0,sd=0.3)
t<-sin(2*pi*x)+y
plot(x,t,ylab = "prediction of mean", ylim = c(-2.5,2.5), col=4,lwd=2, main="GP regression")
#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
x<-seq(0,1,length.out = 10)
y<-rnorm(10, mean=0,sd=0.3)
t<-sin(2*pi*x)+y
plot(x,t,ylab = "prediction of mean", ylim = c(-2.5,2.5), col=4,lwd=2, main="GP regression")
#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
x<-seq(0,1,length.out = 10)
y<-rnorm(10, mean=0,sd=0.3)
t<-sin(2*pi*x)+y
plot(x,t,ylab = "prediction of mean", ylim = c(-2.5,2.5), col=4,lwd=2, main="GP regression")
#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
x<-seq(0,1,length.out = 10)
y<-rnorm(10, mean=0,sd=0.3)
t<-sin(2*pi*x)+y
plot(x,t,ylab = "prediction of mean", ylim = c(-2.5,2.5), col=4,lwd=2, main="GP regression",font.lab=2)
#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
x<-seq(0,1,length.out = 10)
y<-rnorm(10, mean=0,sd=0.3)
t<-sin(2*pi*x)+y
plot(x,t,ylab = "prediction of mean", ylim = c(-2.5,2.5), col=4,lwd=2, main="GP regression",font.lab=2)
#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
x<-seq(0,1,length.out = 10)
y<-rnorm(10, mean=0,sd=0.3)
t<-sin(2*pi*x)+y
plot(x,t,ylab = "prediction of mean", ylim = c(-2.5,2.5), col=4,lwd=2, main="GP regression",font.lab=2)
#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
x<-seq(0,1,length.out = 10)
y<-rnorm(10, mean=0,sd=0.3)
t<-sin(2*pi*x)+y
plot(x,t,ylab = "prediction of mean", ylim = c(-2.5,2.5), col=4,lwd=2, main="GP regression",font.lab=2)
#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
x<-seq(0,1,length.out = 10)
y<-rnorm(10, mean=0,sd=0.3)
t<-sin(2*pi*x)+y
plot(x,t,ylab = "prediction of mean", ylim = c(-2.5,2.5), col=4,lwd=2, main="GP regression",font.lab=2)
#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
x<-seq(0,1,length.out = 10)
y<-rnorm(10, mean=0,sd=0.3)
t<-sin(2*pi*x)+y
plot(x,t,ylab = "prediction of mean", ylim = c(-2.5,2.5), col=4,lwd=2, main="GP regression",font.lab=2)
#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
x<-seq(0,1,length.out = 10)
y<-rnorm(10, mean=0,sd=0.3)
t<-sin(2*pi*x)+y
plot(x,t,ylab = "prediction of mean", ylim = c(-2.5,2.5), col=4,lwd=2, main="GP regression",font.lab=2)
#curve(sin(2*pi*x),0,1,add = TRUE, col = "green",lwd="2")
k_element<-function(x,y,a,b,c,d){
kernel<-a*exp(-(b/2)*(x-y)^2)+c+d*x*y
}
K<-matrix(0,10,10)
for (i in 1:10){
for(j in 1:10) {
K[i,j]<-k_element(x[i],x[j],1,64,0,0)
}
}
K = K + diag(1e-6, 10)
C = K + diag(0.3,10)
x_predict = seq(0,1,length.out = 50)
k<-matrix(0,50,10)
m<-rep(0,50)
var=rep(0,50)
c=rep(0,50)
for (i in 1:50){
for(j in 1:10) {
k[i,j]<-k_element(x_predict[i],x[j],1,64,0,0)
}
c[i]=k_element(x_predict[i],x_predict[i],1,64,0,0)+0.3
m[i]=t(k[i,]) %*% solve(C) %*% t
var[i]=c[i]-t(k[i,]) %*% solve(C) %*% k[i,]
}
lines(x_predict, m, col="red",lwd=4)
lines(x_predict, m+2*sqrt(var), col="green",lwd=4)
lines(x_predict, m-2*sqrt(var), col="green",lwd=4)
?pnorm
?new.env()
?assign
?min
a = diag(c(3,4,5))
a
a<5
a[a=5]
a[a==5]
a[1,2]=7
a[1,3]=8
a[a>5]
a[a>5]= 9
a
?OMEGA
?|
?pnorm
pnorm(2)
pnorm(0)
eh <- new.env(hash = TRUE, size = NA)
with(env.profile(eh), stopifnot(size == length(counts)))
eh
MODEL = new.env()
MODEL$NLS = NLS
MODEL$SIZE.GROUPS = c(1, MODEL$NLS)
names(MODEL$SIZE.GROUPS) = MODEL$NAMES.GROUPS = c("psi.sigma", "psi.tau")
NLS=1
MODEL = new.env()
MODEL$NLS = NLS
MODEL$SIZE.GROUPS = c(1, MODEL$NLS)
names(MODEL$SIZE.GROUPS) = MODEL$NAMES.GROUPS = c("psi.sigma", "psi.tau")
MODEL
SIZE.GROUPS
MODEL$SIZE.GROUPS = c(1, MODEL$NLS)
MODEL$SIZE.GROUPS
psi..sigma
psi.sigma
MODEL$NAMES.GROUPS
?<<-
?diff
CURRENT.STATE <<- new.env()
min.tau.vect = 0.01
max.tau.vect = 2.8
psi.tau.vect = log(seq(min.tau.vect, max.tau.vect, length.out=40))
psi.tau.vect
diff(seq(min.tau.vect, max.tau.vect, length.out=40)
seq(min.tau.vect, max.tau.vect, length.out=40)[c(1,2)]
seq(min.tau.vect, max.tau.vect, length.out=40)
diff(seq(min.tau.vect, max.tau.vect, length.out=40)[c(1,2)])
rm()
rm(list = ls())
setwd("D:/AMIS FOR GP/GP_classification/code_pseudo_marg/section3.3")
## Code to generate the plot in figure 1
## Compare different parametrizations - Ancillary Augmentation (AA), Sufficient Augmentation (SA), and Surrogate method (SURR)
## One hyperparameter only
## **************************************************
## ******************** Initial parameters
## **************************************************
N = 200
NPSEUDO = 100
## APPROXIMATION = "LA"
APPROXIMATION = "LA"
COVARIANCE.MODE = "H"
NREP = 10
D = 2
## **************************************************
## ******************** Load useful functions
## **************************************************
## ps.options(width=18,height=18,paper="special",horizontal=F, pointsize=32)
pdf.options(width=10,height=10,pointsize=32)
ps.options(width=20,height=10,paper="special",horizontal=F, pointsize=32)
APPROACH = "PM"
source("../functions/PRIORS.r")
source("../functions/GP.FUNCTIONS.r")
source("../functions/EP.r")
source("../functions/LA.r")
reset.number.calls()
source("../functions/GENERATE.DATA.r")
MODEL = new.env()
MODEL$NLS = NLS
MODEL$SIZE.GROUPS = c(1, MODEL$NLS)
names(MODEL$SIZE.GROUPS) = MODEL$NAMES.GROUPS = c("psi.sigma", "psi.tau")
if(APPROXIMATION == "LA") compute.approximation = LA
if(APPROXIMATION == "EP") compute.approximation = EP.NOGRAD
TRUE.SIGMA
TRUE.PSI.TAU
n
DATA$n
DATA$d
DATA$n
rnorm(DATA$n*NPSEUDO)
NPSEUDO
matrix(rnorm(DATA$n*NPSEUDO), DATA$n, NPSEUDO)
DATA$n
dim(matrix(rnorm(DATA$n*NPSEUDO), DATA$n, NPSEUDO))
test =matrix(rnorm(DATA$n*NPSEUDO), DATA$n, NPSEUDO)
test[1,]
DATA$n*NPSEUDO
c(approx.model$mu)
?apply
